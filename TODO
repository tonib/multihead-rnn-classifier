TODO:
- Write own estimator model funcion implementation
    * https://www.tensorflow.org/guide/custom_estimators
    * https://github.com/GoogleCloudPlatform/tf-estimator-tutorials/blob/master/06_Sequence_%20Models/01%20-%20RNN%20with%20LSTM%20-%20Predicting%20the%20Next%20Values%20-%20Single%20Pattern.ipynb
    * https://androidkt.com/stock-price-prediction/
    * https://danijar.com/introduction-to-recurrent-networks-in-tensorflow/
    * https://gist.github.com/planetA/b45aaa7ed92699a8b82fda80934a667d
    * https://www.tensorflow.org/beta/tutorials/text/text_generation
    * GRUBlockCellV2 for better performance? (see rnn.py)
    * https://www.tensorflow.org/beta/guide/keras/rnn (TF 2.0)
    * https://www.tensorflow.org/beta/tutorials/keras/feature_columns (TF 2.0, feed feature columns as Keras input)

- Multiple outputs:
    * IMPLEMENT context columns
    * https://github.com/tensorflow/tensorflow/issues/15773
    * https://stackoverflow.com/questions/38517124/how-to-minimize-two-loss-using-tensorflow

- Use tfrecord files? (https://medium.com/mostly-ai/tensorflow-records-what-they-are-and-how-to-use-them-c46bc4bbb564)
- More on performance:
  https://stackoverflow.com/questions/47086599/parallelising-tf-data-dataset-from-generator
  https://stackoverflow.com/questions/48484689/parallelism-isnt-reducing-the-time-in-dataset-map/48781036#48781036
- Allow to configure the padding value for each column?
- Model server: Autopad sequences
- Generate a file with the last evaluation info: It will be used to ponderate probabilites based on accuracy
- Generate .JSON debug files on a different directory: Otherwise it's a mess...
- Allow to configure the cell type (LSTM)
- Allow to configure dropout and/or weight decay
- DOCUMENTATION: Add prerequisites (tf, pandas,...)

REMINDERS

git push -u origin master

tensorboard --logdir data/model
http://localhost:6006

Estimator inference performance / Serving model / Use of Predictor:
https://github.com/MtDersvan/tf_playground/blob/master/wide_and_deep_tutorial/wide_and_deep_basic_serving.md
https://github.com/tensorflow/tensorflow/issues/4648
https://gist.github.com/mikeoconnor0308/521ae2eb1555edc6550014ce0500e6a2
https://cs230-stanford.github.io/tensorflow-input-data.html#introduction-to-tfdata-with-a-text-example
https://highnoongmt.wordpress.com/2015/05/22/lisls-stis-recurrent-neural-networks-for-folk-music-generation/

Export model and predict / serve:
    http://shzhangji.com/blog/2018/05/14/serve-tensorflow-estimator-with-savedmodel/


* saved_model_cli:
    saved_model_cli show --dir=exportedmodel/1550399753 --tag_set serve --signature_def predict

tensorflow_model_server --port=9000 --model_base_path=exportedmodel/1545244360

START WITH THIS:
https://stackoverflow.com/questions/46098863/how-to-import-an-saved-tensorflow-model-train-using-tf-estimator-and-predict-on/46139198

222 CPM -> 48 WPM
3,7 CPS -> 0,8 WPS

requirements:
Visual C++ 2015 Redistributable (Windows)
CPU may requiere AVX (see https://github.com/tensorflow/tensorflow/issues/17386)
pyton 3.6.7
tensorflow 1.14
numpy 1.16.1
pandas 0.24.2 # pip install pandas

* Install Tensorflow in Windows with virtualenv
** Install Python 3.6.7
	- Download Python 3.6.7 ("Windows x86-64 executable installer" link) from https://www.python.org/downloads/release/python-367/ 
	  (or at LSI get it at H:\Programacion\Python)
	- Run setup
	- Mark "Add Python 3.6 to PATH"
	- Click "install now"

** Install tensorflow 1.14 Windows with virtualenv
    cd [PARENT_DIR]

	REM Install virtualenv
	pip install virtualenv

	REM Create the virtualenv
    virtualenv --system-site-packages -p python ./venv

	REM Activate the virtualenv
    .\venv\Scripts\activate

	REM Upgrade pip?
    pip install --upgrade pip

	REM Why?
    REM pip list

	REM Install tensorflow 1.14
    REM pip install --upgrade tensorflow < NOT TO THE LATEST VERSION!
	pip install tensorflow==1.14

	REM Test tf installation
    python -c "import tensorflow as tf; tf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"

    REM Install pandas
    pip install pandas==0.24.2

* Install Tensorflow 1.14 in Linux with virtualenv
    virtualenv --system-site-packages -p python3 ./venv
    source ./venv/bin/activate
    pip install --upgrade pip
    pip list
    #pip install --upgrade tensorflow NOT TO THE LATEST VERSION
    pip install tensorflow==1.14
    # Test TF installation
    python -c "import tensorflow as tf; tf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"
    pip install pandas==0.24.2


* Prediction format:
Prediction: {'isCollection': {'class_prediction': 0, 'probabilities': [0.9971703886985779, 0.0028295705560594797]}, 'legthBucket': {'class_prediction': 0, 'probabilities': [0.38102802634239197, 0.3096150755882263, 0.013816392980515957, 0.1163591593503952, 0.006184279453009367, 0.0024974108673632145, 0.0019232947379350662, 0.01665205880999565, 0.005016367882490158, 0.0043900893069803715, 0.0362323597073555, 0.004558942746371031, 0.0015884715830907226, 0.029023174196481705, 0.014890970662236214, 0.04388183727860451, 0.008182627148926258, 0.004159428644925356]}, 'decimalsBucket': {'class_prediction': 0, 'probabilities': [0.9940299987792969, 3.4467918794689467e-06, 0.0036471218336373568, 0.0001381940091960132, 5.111771770316409e-0

* Metrics format:
{'accuracy/decimalsBucket': 0.9587786, 'accuracy/isCollection': 0.9969466, 'accuracy/legthBucket': 0.66431296, 'accuracy/outputTypeIdx': 0.64122134, 'accuracy_baseline/isCollection': 0.9969466, 'auc/isCollection': 0.9759284, 'auc_precision_recall/isCollection': 0.08735464, 'average_loss/decimalsBucket': 0.16012691, 'average_loss/isCollection': 0.0133258775, 'average_loss/legthBucket': 1.2138829, 'average_loss/outputTypeIdx': 1.2020633, 'label/mean/isCollection': 0.0030534351, 'loss': 165.4689, 'loss/decimalsBucket': 10.2325, 'loss/isCollection': 0.85155606, 'loss/legthBucket': 77.57008, 'loss/outputTypeIdx': 76.81478, 'precision/isCollection': 0.0, 'prediction/mean/isCollection': 0.0034022834, 'recall/isCollection': 0.0, 'global_step': 3108}


***** CANNED ESTIMATOR RESULTS:

Training epoch 7 ...
Evaluating...
W0730 08:13:36.281103 140613938464576 metrics_impl.py:804] Trapezoidal rule is known to produce incorrect PR-AUCs; please switch to "careful_interpolation" instead.
W0730 08:13:36.294708 140613938464576 metrics_impl.py:804] Trapezoidal rule is known to produce incorrect PR-AUCs; please switch to "careful_interpolation" instead.
Evaluation:  {'accuracy/decimalsBucket': 0.93960243, 'accuracy/isCollection': 0.99439347, 'accuracy/legthBucket': 0.6213048, 'accuracy/outputTypeIdx': 0.61671764, 'accuracy_baseline/isCollection': 0.99439347, 'auc/isCollection': 0.7680677, 'auc_precision_recall/isCollection': 0.103974804, 'average_loss/decimalsBucket': 0.22867776, 'average_loss/isCollection': 0.02924547, 'average_loss/legthBucket': 1.2887427, 'average_loss/outputTypeIdx': 1.257264, 'label/mean/isCollection': 0.005606524, 'loss': 177.46162, 'loss/decimalsBucket': 14.473089, 'loss/isCollection': 1.8509552, 'loss/legthBucket': 81.56494, 'loss/outputTypeIdx': 79.57265, 'precision/isCollection': 0.0, 'prediction/mean/isCollection': 0.0041788993, 'recall/isCollection': 0.0, 'global_step': 3255}
Loss decrease: 4.427152872085571 %
Epoch time: 51.57412242889404 s
Train speed:  1269.3179177045497 sequences / s
Total train time: 359.6732454299927 s

***** CUSTOM ESTIMATOR RESULTS:

Training epoch 7 ...
Evaluating...
Evaluation:  {'accuracy/decimalsBucket': 0.93960243, 'accuracy/isCollection': 0.99439347, 'accuracy/legthBucket': 0.6350663, 'accuracy/outputTypeIdx': 0.617737, 'loss': 0.6902402, 'loss/decimalsBucket': 0.22502607, 'loss/isCollection': 0.028760102, 'loss/legthBucket': 1.2510564, 'loss/outputTypeIdx': 1.2561178, 'global_step': 3255}
Loss decrease: 2.7264101430773735 %
Epoch time: 48.39720010757446 s
Train speed:  1322.0499287005387 sequences / s
Total train time: 341.314017534256 s
