TODO:
- Add command line option to do not print warnings
- Use tfrecord files? (https://medium.com/mostly-ai/tensorflow-records-what-they-are-and-how-to-use-them-c46bc4bbb564)
- More on performance:
  https://stackoverflow.com/questions/47086599/parallelising-tf-data-dataset-from-generator
  https://stackoverflow.com/questions/48484689/parallelism-isnt-reducing-the-time-in-dataset-map/48781036#48781036
- Allow to configure the padding value for each column?
- Model server: Autopad sequences
- Generate a file with the last evaluation info: It will be used to ponderate probabilites based on accuracy
- Generate .JSON debug files on a different directory: Otherwise it's a mess...
- Allow to configure the cell type (LSTM)
- Allow to configure dropout and/or weight decay
- Allow to configure the optmizer (Adagrad is the default?)
- DOCUMENTATION: Add prerequisites (tf, pandas,...)

REMINDERS

git push -u origin master

tensorboard --logdir data/model
http://localhost:6006

Estimator inference performance / Serving model / Use of Predictor:
https://github.com/MtDersvan/tf_playground/blob/master/wide_and_deep_tutorial/wide_and_deep_basic_serving.md
https://github.com/tensorflow/tensorflow/issues/4648
https://gist.github.com/mikeoconnor0308/521ae2eb1555edc6550014ce0500e6a2
https://cs230-stanford.github.io/tensorflow-input-data.html#introduction-to-tfdata-with-a-text-example
https://highnoongmt.wordpress.com/2015/05/22/lisls-stis-recurrent-neural-networks-for-folk-music-generation/

Export model and predict / serve:
    http://shzhangji.com/blog/2018/05/14/serve-tensorflow-estimator-with-savedmodel/


* saved_model_cli:
    # Show prediction function signature for canned estimator
    saved_model_cli show --dir=data/exportedmodels/1564680586 --tag_set serve --signature_def predict
    # Show prediction function signature for custom estimator
    saved_model_cli show --dir=data/exportedmodels/1564760074 --tag_set serve --signature_def serving_default

tensorflow_model_server --port=9000 --model_base_path=exportedmodel/1545244360

START WITH THIS:
https://stackoverflow.com/questions/46098863/how-to-import-an-saved-tensorflow-model-train-using-tf-estimator-and-predict-on/46139198

222 CPM -> 48 WPM
3,7 CPS -> 0,8 WPS

requirements:
Visual C++ 2015 Redistributable (Windows)
CPU may requiere AVX (see https://github.com/tensorflow/tensorflow/issues/17386)
pyton 3.6.7
tensorflow 1.14
numpy 1.16.1
pandas 0.24.2 # pip install pandas

* Install Tensorflow in Windows with virtualenv
** Install Python 3.6.7
	- Download Python 3.6.7 ("Windows x86-64 executable installer" link) from https://www.python.org/downloads/release/python-367/ 
	  (or at LSI get it at H:\Programacion\Python)
	- Run setup
	- Mark "Add Python 3.6 to PATH"
	- Click "install now"

** Install tensorflow 1.14 Windows with virtualenv
    cd [PARENT_DIR]

	REM Install virtualenv
	pip install virtualenv

	REM Create the virtualenv
    virtualenv --system-site-packages -p python ./venv

	REM Activate the virtualenv
    .\venv\Scripts\activate

	REM Upgrade pip?
    pip install --upgrade pip

	REM Why?
    REM pip list

	REM Install tensorflow 1.14
    REM pip install --upgrade tensorflow < NOT TO THE LATEST VERSION!
	pip install tensorflow==1.14

	REM Test tf installation
    python -c "import tensorflow as tf; tf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"

    REM Install pandas
    pip install pandas==0.24.2

* Install Tensorflow 1.14 in Linux with virtualenv
    virtualenv --system-site-packages -p python3 ./venv
    source ./venv/bin/activate
    pip install --upgrade pip
    pip list
    #pip install --upgrade tensorflow NOT TO THE LATEST VERSION
    pip install tensorflow==1.14
    # Test TF installation
    python -c "import tensorflow as tf; tf.enable_eager_execution(); print(tf.reduce_sum(tf.random_normal([1000, 1000])))"
    pip install pandas==0.24.2


* Prediction format:
Prediction: {'isCollection': {'class_prediction': 0, 'probabilities': [0.9971703886985779, 0.0028295705560594797]}, 'legthBucket': {'class_prediction': 0, 'probabilities': [0.38102802634239197, 0.3096150755882263, 0.013816392980515957, 0.1163591593503952, 0.006184279453009367, 0.0024974108673632145, 0.0019232947379350662, 0.01665205880999565, 0.005016367882490158, 0.0043900893069803715, 0.0362323597073555, 0.004558942746371031, 0.0015884715830907226, 0.029023174196481705, 0.014890970662236214, 0.04388183727860451, 0.008182627148926258, 0.004159428644925356]}, 'decimalsBucket': {'class_prediction': 0, 'probabilities': [0.9940299987792969, 3.4467918794689467e-06, 0.0036471218336373568, 0.0001381940091960132, 5.111771770316409e-0

* Metrics format:
{'accuracy/decimalsBucket': 0.9587786, 'accuracy/isCollection': 0.9969466, 'accuracy/legthBucket': 0.66431296, 'accuracy/outputTypeIdx': 0.64122134, 'accuracy_baseline/isCollection': 0.9969466, 'auc/isCollection': 0.9759284, 'auc_precision_recall/isCollection': 0.08735464, 'average_loss/decimalsBucket': 0.16012691, 'average_loss/isCollection': 0.0133258775, 'average_loss/legthBucket': 1.2138829, 'average_loss/outputTypeIdx': 1.2020633, 'label/mean/isCollection': 0.0030534351, 'loss': 165.4689, 'loss/decimalsBucket': 10.2325, 'loss/isCollection': 0.85155606, 'loss/legthBucket': 77.57008, 'loss/outputTypeIdx': 76.81478, 'precision/isCollection': 0.0, 'prediction/mean/isCollection': 0.0034022834, 'recall/isCollection': 0.0, 'global_step': 3108}


***** CANNED ESTIMATOR RESULTS:

Training epoch 7 ...
Evaluating...
Evaluation:  {'accuracy/decimalsBucket': 0.8922086, 'accuracy/isCollection': 0.90743995, 'accuracy/isControl': 0.8172232, 'accuracy/lengthBucket': 0.75454015, 'accuracy/outputTypeIdx': 0.62038666, 'accuracy/textHash0': 0.56004685, 'accuracy/textHash1': 0.50087875, 'accuracy/textHash2': 0.64674866, 'accuracy/textHash3': 0.8471002, 'average_loss/decimalsBucket': 0.34259295, 'average_loss/isCollection': 0.26767275, 'average_loss/isControl': 0.44271556, 'average_loss/lengthBucket': 0.92358184, 'average_loss/outputTypeIdx': 1.3751706, 'average_loss/textHash0': 1.5086322, 'average_loss/textHash1': 1.7459004, 'average_loss/textHash2': 1.4039731, 'average_loss/textHash3': 0.58956563, 'loss': 543.6987, 'loss/decimalsBucket': 21.659487, 'loss/isCollection': 16.922865, 'loss/isControl': 27.989462, 'loss/lengthBucket': 58.390896, 'loss/outputTypeIdx': 86.941345, 'loss/textHash0': 95.37908, 'loss/textHash1': 110.3797, 'loss/textHash2': 88.7623, 'loss/textHash3': 37.27365, 'global_step': 2562}
Loss decrease: 2.837500162422657 %
Epoch time: 60.147926807403564 s
Train speed:  893.4642030883039 sequences / s
Total train time: 416.1845705509186 s


***** CUSTOM ESTIMATOR RESULTS:

Training epoch 7 ...
Evaluating...
Evaluation:  {'accuracy/decimalsBucket': 0.90978324, 'accuracy/isCollection': 0.923843, 'accuracy/isControl': 0.82132393, 'accuracy/lengthBucket': 0.7680141, 'accuracy/outputTypeIdx': 0.6385472, 'accuracy/textHash0': 0.55008787, 'accuracy/textHash1': 0.52899826, 'accuracy/textHash2': 0.65319276, 'accuracy/textHash3': 0.84827185, 'loss': 0.9055806, 'loss/decimalsBucket': 0.27407032, 'loss/isCollection': 0.1940389, 'loss/isControl': 0.40906608, 'loss/lengthBucket': 0.840173, 'loss/outputTypeIdx': 1.2997233, 'loss/textHash0': 1.5318633, 'loss/textHash1': 1.6802183, 'loss/textHash2': 1.3469537, 'loss/textHash3': 0.5741187, 'global_step': 2562}
Loss decrease: 1.9855810329318047 %
Epoch time: 60.139899015426636 s
Train speed:  884.0166602083842 sequences / s
Total train time: 417.6330919265747 s

